#include "imports/stdlib.fc";
const const::bounty_amount = 50000000;
(slice, slice, slice) load_data() inline {
  var ds = get_data().begin_parse();
  return (
    ds~load_msg_addr(), ;; the customer address
   	ds~load_msg_addr(), ;; the seller address
    ds~load_msg_addr() ;; owner_address
  );
}

() save_data(slice customer_address,slice seller_address, slice owner_address) impure inline {
  set_data(begin_cell()
    .store_slice(customer_address) ;; the customer address
    .store_slice(seller_address) ;; the seller address
    .store_slice(owner_address) ;; owner_address
    .end_cell());
}

() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {
    slice cs = in_msg.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    var (customer_address,seller_address, owner_address) = load_data();
    if (op == 1) {
      return();
    }
    if (op == 2) {
        throw_unless(103, equal_slice_bits(sender_address, customer_address) | equal_slice_bits(sender_address, owner_address));
        var [balance, _] = get_balance();
        int withdraw_amount = in_msg_body~load_coins() - const::bounty_amount; 
        int msg_mode = 1;
        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(seller_address)
            .store_coins(withdraw_amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
        send_raw_message(msg.end_cell(), msg_mode);
        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(owner_address)
            .store_coins(const::bounty_amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
        send_raw_message(msg.end_cell(), msg_mode);
        return();
    }
    if (op == 3) {
        throw_unless(110, equal_slice_bits(sender_address, seller_address) | equal_slice_bits(sender_address, owner_address));
        var [balance, _] = get_balance();
        int msg_mode = 1;
        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(customer_address)
            .store_coins(in_msg_body~load_coins())
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
        send_raw_message(msg.end_cell(), msg_mode);
        return();
    }
    throw(777);
}
(slice,slice,slice) get_contract_storage_data() method_id {
  var (customer_address,seller_address, owner_address) = load_data();
  return (
    customer_address,
    seller_address,
    owner_address
  );
}
int balance() method_id {
  var [balance, _] = get_balance();
  return balance;
}